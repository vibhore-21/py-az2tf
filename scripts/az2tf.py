#!/usr/bin/python
# RUNBOOK ON
import subprocess
import requests
import adal
import os
import json
import sys
import glob
import argparse
import ast
from utils.utils import get_logger
# RUNBOOK OFF
scwd = os.getcwd()
# print scwd
head, tail = os.path.split(scwd)
os.chdir(head)
cwd = os.getcwd()
head, tail = os.path.split(cwd)
newd = head + "/scripts"
# chdir scripts
os.chdir(newd)


# print os.getcwd()
# import azure_resources
# RUNBOOK ON
# RUNBOOK INLINE1
import azurerm_resource_group  # v12
import azurerm_management_lock  # v12
import azurerm_user_assigned_identity
import azurerm_availability_set  # v12
import azurerm_route_table  # v12
import azurerm_application_security_group
import azurerm_network_security_group  # v12
import azurerm_virtual_network  # v12
import azurerm_subnet  # v12
import azurerm_virtual_network_peering  # v12
import azurerm_managed_disk  # v12
import azurerm_storage_account  # v12
import azurerm_key_vault  # v12
import azurerm_public_ip  # v12
import azurerm_traffic_manager_profile
import azurerm_traffic_manager_endpoint
import azurerm_network_interface  # v12
import azurerm_dns_zone
import azurerm_lb  # v12
import azurerm_lb_nat_rule  # v12
import azurerm_lb_nat_pool  # v12
import azurerm_lb_backend_address_pool  # v12
import azurerm_lb_probe  # v12
import azurerm_lb_rule  # v12
import azurerm_application_gateway

import azurerm_local_network_gateway
import azurerm_virtual_network_gateway  # v12
import azurerm_virtual_network_gateway_connection  # --   #v12
import azurerm_express_route_circuit
import azurerm_express_route_circuit_authorization
import azurerm_express_route_circuit_peering  # --
import azurerm_container_registry  # v12
import azurerm_kubernetes_cluster
import azurerm_recovery_services_vault  # v12
import azurerm_virtual_machine  # v12
import azurerm_virtual_machine_extension  # v12
import azurerm_virtual_machine_scale_set  # v12

import azurerm_automation_account  # v12
import azurerm_log_analytics_workspace  # v12
import azurerm_log_analytics_solution  # v12
import azurerm_image  # v12
import azurerm_shared_image_gallery  # v12
import azurerm_shared_image  # v12
import azurerm_shared_image_version  # v12
import azurerm_snapshot  # v12
import azurerm_network_watcher  # v12
import azurerm_cosmosdb_account
import azurerm_servicebus_namespace
import azurerm_servicebus_queue
import azurerm_eventhub_namespace
import azurerm_eventhub
import azurerm_eventhub_namespace_authorization_rule

import azurerm_sql_server
import azurerm_sql_database
import azurerm_databricks_workspace
import azurerm_app_service_plan
import azurerm_app_service
import azurerm_app_service_slot
import azurerm_function_app
import azurerm_logic_app_workflow
import azurerm_logic_app_trigger_http_request
import azurerm_monitor_autoscale_setting
import azurerm_api_management

import azurerm_policy_definition
import azurerm_policy_set_definition
import azurerm_policy_assignment
import azurerm_role_definition
import azurerm_role_assignment

# RUNBOOK OFF
os.chdir(scwd)
# print os.getcwd()

parser = argparse.ArgumentParser(description='terraform sub rg')
parser.add_argument('-c', help='Cloud')
parser.add_argument('-s', help='Subscription Id')
parser.add_argument('-g', help='Resource Group')
parser.add_argument('-r', help='Filter azurerm resource')
parser.add_argument('-p', help='Subscription Policies & RBAC')
parser.add_argument('-f', help='Fast Forward')
parser.add_argument('-d', help='Debug')
# parser.add_argument('--group-by-rg', help='group by resource group')
args = parser.parse_args()
cloud = args.c
csub = args.s
crg = args.g
resource_filter = args.r  # resource_filter
deb = args.d
pol = args.p
ff = args.f
# group_by_rg = args.group-by-rg

cde = False
logger = get_logger()
exit()
az2tfmess = "# File generated by py-az2tf see: https://github.com/andyt530/py-az2tf \n"

if cloud is not None:
    if cloud == 'AzureCloud':
        cldurl = 'management.azure.com'
    elif cloud == 'AzureChinaCloud':
        cldurl = 'management.chinacloudapi.cn'
    elif cloud == 'AzureUSGovernment':
        cldurl = 'management.usgovcloudapi.net'
    elif cloud == 'AzureGermanCloud':
        cldurl = 'management.microsoftazure.de'
    else:
        cldurl = 'management.azure.com'
    print("Cloud= " + cloud)

# RUNBOOK OFF
if csub is not None:
    # validate sub
    if len(csub) != 36:
        print("Expected subscription id to be 36 characters long got " + str(len(csub)) + " characters in " + csub)
        exit("Error: SubLength")

if crg is not None:
    print("resource group=" + crg)
    # validate rg
if pol is not None:
    print("Policies & RBAC=" + pol)
    # validate resource
if resource_filter is not None:
    print("resource filter=" + resource_filter)
    # validate resource
if deb is not None:
    cde = True
    print("Debug=" + str(cde))


if sys.version_info[0] < 3:
    # raise Exception("Must be using Python 2")
    print("Python version ", sys.version_info[0], " version 3 required, Exiting")
    exit()


print("Get Access Token from CLI")
p = subprocess.Popen('az account get-access-token -o json', shell=True, stdout=subprocess.PIPE,
                     stderr=subprocess.STDOUT)
c = 0
for rline in p.stdout.readlines():

    line = str(rline)[5:]
    # line=line[5:]
    # print("---",line)
    if "accessToken" in line:
        # tk=line.split(":")[1]
        tk = line.split('"')[2]
        # print("tk=",tk)
        tk2 = tk.replace(",", "")
        bt2 = tk2.replace('"', '')
    if "subscription" in line:
        try:
            tk = line.split(":")[1].strip(' ",')
        except IndexError:
            print("Error getting subscription - Login again with CLI\n")
            exit("LoginWithCli")

        tk2 = tk.replace(",", "")
        sub2 = tk2.replace('"', '')
retval = p.wait()
if csub is not None:
    sub = csub
else:
    sub = sub2.rstrip('\n')

# bt=bt2.rstrip('\n')
bt = bt2.rstrip()
print("Subscription:", sub)
headers = {'Authorization': 'Bearer ' + bt, 'Content-Type': 'application/json'}
# print "CloudURL:",cldurl
# print "BearerToken:",bt

# subscription check

url = "https://" + cldurl + "/subscriptions/"
# print("url=",url)
# print("headers=",headers)
params = {'api-version': '2014-04-01'}
try:
    r = requests.get(url, headers=headers, params=params)
    print(str(r))
    subs = r.json()["value"]
except KeyError:
    print("Error getting subscription list")
    exit("ErrorGettingSubscriptionList")
# print(json.dumps(subs, indent=4, separators=(',', ': ')))
# ssubs=json.dumps(subs)
# print ssubs
# if sub not in ssubs:
#    print "Could not find subscription with ID " + sub + " Exiting ..." 
#    exit("ErrorInvalidSubscriptionID-1")


# print(json.dumps(subs, indent=4, separators=(',', ': ')))

FoundSub = False
count = len(subs)

for i in range(0, count):
    id = str(subs[i]["subscriptionId"])
    # print id + " " + sub
    if id == sub:
        FoundSub = True

# if not FoundSub:
#    print "Could not find subscription with ID " + sub + " Exiting ..." 
# exit("Error: InvalidSubscriptionID-2")

print("Found subscription " + sub + " proceeding ...")

if crg is not None:
    FoundRg = False
    # get and check Resource group
    url = "https://" + cldurl + "/subscriptions/" + sub + "/resourceGroups"
    params = {'api-version': '2014-04-01'}
    r = requests.get(url, headers=headers, params=params)
    rgs = r.json()["value"]

    count = len(rgs)
    for j in range(0, count):
        name = rgs[j]["name"]
        if crg.lower() == name.lower():
            print("Found Resource Group" + crg)
            FoundRg = True

    if not FoundRg:
        print("Could not find Resource Group " + crg + " in subscription " + sub + " Exiting ...")
        exit("ErrorInvalidResourceGroup")

if os.path.exists("tf-staterm.sh"):
    os.remove('tf-staterm.sh')
if os.path.exists("tf-stateimp.sh"):
    os.remove('tf-stateimp.sh')

if resource_filter is None:
    resource_filter = "azurerm"

if pol is not None:
    azurerm_policy_definition.azurerm_policy_definition(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
    azurerm_policy_assignment.azurerm_policy_assignment(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
    azurerm_policy_set_definition.azurerm_policy_set_definition(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess,
                                                                cldurl)
    azurerm_role_definition.azurerm_role_definition(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
    azurerm_role_assignment.azurerm_role_assignment(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)

# RUNBOOK ON
# RUNBOOK INLINE2

# record and sort resources - no longer needed
# azure_resources.azure_resources(resource_filter,cde,crg,headers,requests,sub,json,az2tfmess,os)
# 001 Resource Group
azurerm_resource_group.azurerm_resource_group(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 002 management lock
azurerm_management_lock.azurerm_management_lock(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 015 user assigned identity
azurerm_user_assigned_identity.azurerm_user_assigned_identity(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess,
                                                              cldurl)
# 020 Avail Sets
azurerm_availability_set.azurerm_availability_set(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 030 Route Table
azurerm_route_table.azurerm_route_table(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 040 ASG
azurerm_application_security_group.azurerm_application_security_group(resource_filter, cde, crg, headers, requests, sub, json,
                                                                      az2tfmess, cldurl)
# 050 NSG's
azurerm_network_security_group.azurerm_network_security_group(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess,
                                                              cldurl)
# 060 Virtual Networks
azurerm_virtual_network.azurerm_virtual_network(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 070 subnets
azurerm_subnet.azurerm_subnet(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 080 vnet peering
azurerm_virtual_network_peering.azurerm_virtual_network_peering(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess,
                                                                cldurl)
# 090 Key Vault - using cli
azurerm_key_vault.azurerm_key_vault(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 100 managed disk
azurerm_managed_disk.azurerm_managed_disk(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 110 storgae account
azurerm_storage_account.azurerm_storage_account(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 120 public ip
azurerm_public_ip.azurerm_public_ip(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 124 Traffic manager profile
azurerm_traffic_manager_profile.azurerm_traffic_manager_profile(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess,
                                                                cldurl)
# 125 traffic manager endpoint
azurerm_traffic_manager_endpoint.azurerm_traffic_manager_endpoint(resource_filter, cde, crg, headers, requests, sub, json,
                                                                  az2tfmess, cldurl)
# 130 network interface
azurerm_network_interface.azurerm_network_interface(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 131_azurerm_dns_zone
azurerm_dns_zone.azurerm_dns_zone(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 140_azurerm_lb
azurerm_lb.azurerm_lb(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 150_azurerm_lb_nat_rule
azurerm_lb_nat_rule.azurerm_lb_nat_rule(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 160_azurerm_lb_nat_pool
azurerm_lb_nat_pool.azurerm_lb_nat_pool(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 170_azurerm_lb_backend_address_pool
azurerm_lb_backend_address_pool.azurerm_lb_backend_address_pool(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess,
                                                                cldurl)
# 180_azurerm_lb_probe
azurerm_lb_probe.azurerm_lb_probe(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 190_azurerm_lb_rule
azurerm_lb_rule.azurerm_lb_rule(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 193_azurerm_application_gateway
azurerm_application_gateway.azurerm_application_gateway(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 200_azurerm_local_network_gateway
azurerm_local_network_gateway.azurerm_local_network_gateway(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess,
                                                            cldurl)
# 210_azurerm_virtual_network_gateway
azurerm_virtual_network_gateway.azurerm_virtual_network_gateway(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess,
                                                                cldurl)
# 220_azurerm_virtual_network_gateway_connection
azurerm_virtual_network_gateway_connection.azurerm_virtual_network_gateway_connection(resource_filter, cde, crg, headers, requests,
                                                                                      sub, json, az2tfmess, cldurl)
# 230_azurerm_express_route_circuit
azurerm_express_route_circuit.azurerm_express_route_circuit(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess,
                                                            cldurl)
# 240_azurerm_express_route_circuit_authorization
azurerm_express_route_circuit_authorization.azurerm_express_route_circuit_authorization(resource_filter, cde, crg, headers,
                                                                                        requests, sub, json, az2tfmess,
                                                                                        cldurl)
# 250_azurerm_express_route_circuit_peering
azurerm_express_route_circuit_peering.azurerm_express_route_circuit_peering(resource_filter, cde, crg, headers, requests, sub, json,
                                                                            az2tfmess, cldurl)
# 260_azurerm_container_registry
azurerm_container_registry.azurerm_container_registry(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 270_azurerm_kubernetes_cluster
azurerm_kubernetes_cluster.azurerm_kubernetes_cluster(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 280_azurerm_recovery_services_vault
azurerm_recovery_services_vault.azurerm_recovery_services_vault(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess,
                                                                cldurl)
# 290_azurerm_virtual_machine
azurerm_virtual_machine.azurerm_virtual_machine(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 290_azurerm_virtual_machine_extension
azurerm_virtual_machine_extension.azurerm_virtual_machine_extension(resource_filter, cde, crg, headers, requests, sub, json,
                                                                    az2tfmess, cldurl)
# 295_azurerm_virtual_machine_scale_set
azurerm_virtual_machine_scale_set.azurerm_virtual_machine_scale_set(resource_filter, cde, crg, headers, requests, sub, json,
                                                                    az2tfmess, cldurl)
# 310_azurerm_automation_account
azurerm_automation_account.azurerm_automation_account(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 320_azurerm_log_analytics_workspace
azurerm_log_analytics_workspace.azurerm_log_analytics_workspace(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess,
                                                                cldurl)
# 330_azurerm_log_analytics_solution
azurerm_log_analytics_solution.azurerm_log_analytics_solution(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess,
                                                              cldurl)
# 340_azurerm_image
azurerm_image.azurerm_image(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)

# 341_azurerm_shared_image_gallery
azurerm_shared_image_gallery.azurerm_shared_image_gallery(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess,
                                                          cldurl)
azurerm_shared_image.azurerm_shared_image(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
azurerm_shared_image_version.azurerm_shared_image_version(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess,
                                                          cldurl)
# 350_azurerm_snapshot
azurerm_snapshot.azurerm_snapshot(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 360_azurerm_network_watcher
azurerm_network_watcher.azurerm_network_watcher(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 400_azurerm_cosmosdb_account
azurerm_cosmosdb_account.azurerm_cosmosdb_account(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 500_azurerm_servicebus_namespace
azurerm_servicebus_namespace.azurerm_servicebus_namespace(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess,
                                                          cldurl)
# 510_azurerm_servicebus_queue
azurerm_servicebus_queue.azurerm_servicebus_queue(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 520_azurerm_eventhub_namespace
azurerm_eventhub_namespace.azurerm_eventhub_namespace(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 521_azurerm_eventhub
azurerm_eventhub.azurerm_eventhub(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 522_azurerm_eventhub_namespace_authorization_rule
azurerm_eventhub_namespace_authorization_rule.azurerm_eventhub_namespace_authorization_rule(resource_filter, cde, crg, headers,
                                                                                            requests, sub, json,
                                                                                            az2tfmess, cldurl)
# 540_azurerm_sql_server
azurerm_sql_server.azurerm_sql_server(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 541_azurerm_sql_database
azurerm_sql_database.azurerm_sql_database(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)

# 550_azurerm_databricks_workspace
if cloud != 'AzureChinaCloud':
    azurerm_databricks_workspace.azurerm_databricks_workspace(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess,
                                                              cldurl)
# 600_azurerm_app_service_plan
azurerm_app_service_plan.azurerm_app_service_plan(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 610_azurerm_app_service
azurerm_app_service.azurerm_app_service(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)
# 611_azurerm_app_service_slot
azurerm_app_service_slot.azurerm_app_service_slot(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)

# 620_azurerm_function_app
azurerm_function_app.azurerm_function_app(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)

# 630_azurerm_logic_app_workflow
azurerm_logic_app_workflow.azurerm_logic_app_workflow(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)

# 640_azurerm_api_management
azurerm_api_management.azurerm_api_management(resource_filter, cde, crg, headers, requests, sub, json, az2tfmess, cldurl)

# 631_azurerm_logic_app_trigger_http_request
# AWAITING terraform import fix
# azurerm_logic_app_trigger_http_request.azurerm_logic_app_trigger_http_request(resource_filter,cde,crg,headers,requests,sub,json,az2tfmess,cldurl)

if cloud != 'AzureChinaCloud':
    # 650_azurerm_monitor_autoscale_setting
    azurerm_monitor_autoscale_setting.azurerm_monitor_autoscale_setting(resource_filter, cde, crg, headers, requests, sub, json,
                                                                        az2tfmess, cldurl)
# ******************************************************************************************
# RUNBOOK OFF
print("Exit .....")
exit()
